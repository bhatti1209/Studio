//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace testdb {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("StudentDBDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class StudentDBDataSet : System.Data.DataSet {
        
        private StudentDataTable tableStudent;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StudentDBDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected StudentDBDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Student"] != null)) {
                    base.Tables.Add(new StudentDataTable(ds.Tables["Student"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StudentDataTable Student {
            get {
                return this.tableStudent;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            StudentDBDataSet cln = ((StudentDBDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Student"] != null)) {
                    base.Tables.Add(new StudentDataTable(ds.Tables["Student"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableStudent = ((StudentDataTable)(base.Tables["Student"]));
            if ((initTable == true)) {
                if ((this.tableStudent != null)) {
                    this.tableStudent.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "StudentDBDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/StudentDBDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableStudent = new StudentDataTable();
            base.Tables.Add(this.tableStudent);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStudent() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            StudentDBDataSet ds = new StudentDBDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void StudentRowChangeEventHandler(object sender, StudentRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StudentDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFirstName;
            
            private System.Data.DataColumn columnLastName;
            
            private System.Data.DataColumn columnRollNumber;
            
            private System.Data.DataColumn columnTotalCredit;
            
            private System.Data.DataColumn columnEmail;
            
            private System.Data.DataColumn columnsem;
            
            private System.Data.DataColumn columnsub1;
            
            private System.Data.DataColumn columncore1;
            
            private System.Data.DataColumn columnsub2;
            
            private System.Data.DataColumn columncore2;
            
            private System.Data.DataColumn columnsub3;
            
            private System.Data.DataColumn columncore3;
            
            private System.Data.DataColumn columnsub4;
            
            private System.Data.DataColumn columncore4;
            
            private System.Data.DataColumn columnsub5;
            
            private System.Data.DataColumn columnopt1;
            
            private System.Data.DataColumn columnsub6;
            
            private System.Data.DataColumn columnopt2;
            
            private System.Data.DataColumn columnsub7;
            
            private System.Data.DataColumn columnopt3;
            
            private System.Data.DataColumn columnsub8;
            
            private System.Data.DataColumn columnopt4;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentDataTable() {
                this.TableName = "Student";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StudentDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StudentDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RollNumberColumn {
                get {
                    return this.columnRollNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TotalCreditColumn {
                get {
                    return this.columnTotalCredit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn semColumn {
                get {
                    return this.columnsem;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sub1Column {
                get {
                    return this.columnsub1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn core1Column {
                get {
                    return this.columncore1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sub2Column {
                get {
                    return this.columnsub2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn core2Column {
                get {
                    return this.columncore2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sub3Column {
                get {
                    return this.columnsub3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn core3Column {
                get {
                    return this.columncore3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sub4Column {
                get {
                    return this.columnsub4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn core4Column {
                get {
                    return this.columncore4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sub5Column {
                get {
                    return this.columnsub5;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn opt1Column {
                get {
                    return this.columnopt1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sub6Column {
                get {
                    return this.columnsub6;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn opt2Column {
                get {
                    return this.columnopt2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sub7Column {
                get {
                    return this.columnsub7;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn opt3Column {
                get {
                    return this.columnopt3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sub8Column {
                get {
                    return this.columnsub8;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn opt4Column {
                get {
                    return this.columnopt4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentRow this[int index] {
                get {
                    return ((StudentRow)(this.Rows[index]));
                }
            }
            
            public event StudentRowChangeEventHandler StudentRowChanging;
            
            public event StudentRowChangeEventHandler StudentRowChanged;
            
            public event StudentRowChangeEventHandler StudentRowDeleting;
            
            public event StudentRowChangeEventHandler StudentRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStudentRow(StudentRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentRow AddStudentRow(
                        string FirstName, 
                        string LastName, 
                        string RollNumber, 
                        int TotalCredit, 
                        string Email, 
                        string sem, 
                        string sub1, 
                        string core1, 
                        string sub2, 
                        string core2, 
                        string sub3, 
                        string core3, 
                        string sub4, 
                        string core4, 
                        string sub5, 
                        string opt1, 
                        string sub6, 
                        string opt2, 
                        string sub7, 
                        string opt3, 
                        string sub8, 
                        string opt4) {
                StudentRow rowStudentRow = ((StudentRow)(this.NewRow()));
                rowStudentRow.ItemArray = new object[] {
                        FirstName,
                        LastName,
                        RollNumber,
                        TotalCredit,
                        Email,
                        sem,
                        sub1,
                        core1,
                        sub2,
                        core2,
                        sub3,
                        core3,
                        sub4,
                        core4,
                        sub5,
                        opt1,
                        sub6,
                        opt2,
                        sub7,
                        opt3,
                        sub8,
                        opt4};
                this.Rows.Add(rowStudentRow);
                return rowStudentRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                StudentDataTable cln = ((StudentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new StudentDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnRollNumber = base.Columns["RollNumber"];
                this.columnTotalCredit = base.Columns["TotalCredit"];
                this.columnEmail = base.Columns["Email"];
                this.columnsem = base.Columns["sem"];
                this.columnsub1 = base.Columns["sub1"];
                this.columncore1 = base.Columns["core1"];
                this.columnsub2 = base.Columns["sub2"];
                this.columncore2 = base.Columns["core2"];
                this.columnsub3 = base.Columns["sub3"];
                this.columncore3 = base.Columns["core3"];
                this.columnsub4 = base.Columns["sub4"];
                this.columncore4 = base.Columns["core4"];
                this.columnsub5 = base.Columns["sub5"];
                this.columnopt1 = base.Columns["opt1"];
                this.columnsub6 = base.Columns["sub6"];
                this.columnopt2 = base.Columns["opt2"];
                this.columnsub7 = base.Columns["sub7"];
                this.columnopt3 = base.Columns["opt3"];
                this.columnsub8 = base.Columns["sub8"];
                this.columnopt4 = base.Columns["opt4"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFirstName = new System.Data.DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new System.Data.DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnRollNumber = new System.Data.DataColumn("RollNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollNumber);
                this.columnTotalCredit = new System.Data.DataColumn("TotalCredit", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCredit);
                this.columnEmail = new System.Data.DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnsem = new System.Data.DataColumn("sem", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsem);
                this.columnsub1 = new System.Data.DataColumn("sub1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsub1);
                this.columncore1 = new System.Data.DataColumn("core1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncore1);
                this.columnsub2 = new System.Data.DataColumn("sub2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsub2);
                this.columncore2 = new System.Data.DataColumn("core2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncore2);
                this.columnsub3 = new System.Data.DataColumn("sub3", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsub3);
                this.columncore3 = new System.Data.DataColumn("core3", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncore3);
                this.columnsub4 = new System.Data.DataColumn("sub4", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsub4);
                this.columncore4 = new System.Data.DataColumn("core4", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncore4);
                this.columnsub5 = new System.Data.DataColumn("sub5", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsub5);
                this.columnopt1 = new System.Data.DataColumn("opt1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnopt1);
                this.columnsub6 = new System.Data.DataColumn("sub6", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsub6);
                this.columnopt2 = new System.Data.DataColumn("opt2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnopt2);
                this.columnsub7 = new System.Data.DataColumn("sub7", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsub7);
                this.columnopt3 = new System.Data.DataColumn("opt3", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnopt3);
                this.columnsub8 = new System.Data.DataColumn("sub8", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsub8);
                this.columnopt4 = new System.Data.DataColumn("opt4", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnopt4);
                this.columnFirstName.MaxLength = 50;
                this.columnLastName.MaxLength = 50;
                this.columnRollNumber.MaxLength = 10;
                this.columnEmail.MaxLength = 50;
                this.columnsem.MaxLength = 10;
                this.columnsub1.MaxLength = 50;
                this.columncore1.MaxLength = 10;
                this.columnsub2.MaxLength = 50;
                this.columncore2.MaxLength = 10;
                this.columnsub3.MaxLength = 50;
                this.columncore3.MaxLength = 10;
                this.columnsub4.MaxLength = 50;
                this.columncore4.MaxLength = 10;
                this.columnsub5.MaxLength = 50;
                this.columnopt1.MaxLength = 10;
                this.columnsub6.MaxLength = 50;
                this.columnopt2.MaxLength = 10;
                this.columnsub7.MaxLength = 50;
                this.columnopt3.MaxLength = 10;
                this.columnsub8.MaxLength = 50;
                this.columnopt4.MaxLength = 10;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentRow NewStudentRow() {
                return ((StudentRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new StudentRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(StudentRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StudentRowChanged != null)) {
                    this.StudentRowChanged(this, new StudentRowChangeEvent(((StudentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StudentRowChanging != null)) {
                    this.StudentRowChanging(this, new StudentRowChangeEvent(((StudentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StudentRowDeleted != null)) {
                    this.StudentRowDeleted(this, new StudentRowChangeEvent(((StudentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StudentRowDeleting != null)) {
                    this.StudentRowDeleting(this, new StudentRowChangeEvent(((StudentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStudentRow(StudentRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                StudentDBDataSet ds = new StudentDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StudentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StudentRow : System.Data.DataRow {
            
            private StudentDataTable tableStudent;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StudentRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStudent = ((StudentDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableStudent.FirstNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FirstName\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.FirstNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableStudent.LastNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LastName\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.LastNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RollNumber {
                get {
                    try {
                        return ((string)(this[this.tableStudent.RollNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RollNumber\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.RollNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalCredit {
                get {
                    try {
                        return ((int)(this[this.tableStudent.TotalCreditColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TotalCredit\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.TotalCreditColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableStudent.EmailColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Email\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.EmailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sem {
                get {
                    try {
                        return ((string)(this[this.tableStudent.semColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'sem\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.semColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sub1 {
                get {
                    try {
                        return ((string)(this[this.tableStudent.sub1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'sub1\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.sub1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string core1 {
                get {
                    try {
                        return ((string)(this[this.tableStudent.core1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'core1\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.core1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sub2 {
                get {
                    try {
                        return ((string)(this[this.tableStudent.sub2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'sub2\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.sub2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string core2 {
                get {
                    try {
                        return ((string)(this[this.tableStudent.core2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'core2\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.core2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sub3 {
                get {
                    try {
                        return ((string)(this[this.tableStudent.sub3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'sub3\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.sub3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string core3 {
                get {
                    try {
                        return ((string)(this[this.tableStudent.core3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'core3\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.core3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sub4 {
                get {
                    try {
                        return ((string)(this[this.tableStudent.sub4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'sub4\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.sub4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string core4 {
                get {
                    try {
                        return ((string)(this[this.tableStudent.core4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'core4\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.core4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sub5 {
                get {
                    try {
                        return ((string)(this[this.tableStudent.sub5Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'sub5\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.sub5Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string opt1 {
                get {
                    try {
                        return ((string)(this[this.tableStudent.opt1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'opt1\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.opt1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sub6 {
                get {
                    try {
                        return ((string)(this[this.tableStudent.sub6Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'sub6\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.sub6Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string opt2 {
                get {
                    try {
                        return ((string)(this[this.tableStudent.opt2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'opt2\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.opt2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sub7 {
                get {
                    try {
                        return ((string)(this[this.tableStudent.sub7Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'sub7\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.sub7Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string opt3 {
                get {
                    try {
                        return ((string)(this[this.tableStudent.opt3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'opt3\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.opt3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sub8 {
                get {
                    try {
                        return ((string)(this[this.tableStudent.sub8Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'sub8\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.sub8Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string opt4 {
                get {
                    try {
                        return ((string)(this[this.tableStudent.opt4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'opt4\' in table \'Student\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudent.opt4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableStudent.FirstNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableStudent.FirstNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tableStudent.LastNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tableStudent.LastNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollNumberNull() {
                return this.IsNull(this.tableStudent.RollNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollNumberNull() {
                this[this.tableStudent.RollNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalCreditNull() {
                return this.IsNull(this.tableStudent.TotalCreditColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalCreditNull() {
                this[this.tableStudent.TotalCreditColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableStudent.EmailColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableStudent.EmailColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssemNull() {
                return this.IsNull(this.tableStudent.semColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsemNull() {
                this[this.tableStudent.semColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issub1Null() {
                return this.IsNull(this.tableStudent.sub1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsub1Null() {
                this[this.tableStudent.sub1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscore1Null() {
                return this.IsNull(this.tableStudent.core1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcore1Null() {
                this[this.tableStudent.core1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issub2Null() {
                return this.IsNull(this.tableStudent.sub2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsub2Null() {
                this[this.tableStudent.sub2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscore2Null() {
                return this.IsNull(this.tableStudent.core2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcore2Null() {
                this[this.tableStudent.core2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issub3Null() {
                return this.IsNull(this.tableStudent.sub3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsub3Null() {
                this[this.tableStudent.sub3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscore3Null() {
                return this.IsNull(this.tableStudent.core3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcore3Null() {
                this[this.tableStudent.core3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issub4Null() {
                return this.IsNull(this.tableStudent.sub4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsub4Null() {
                this[this.tableStudent.sub4Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscore4Null() {
                return this.IsNull(this.tableStudent.core4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcore4Null() {
                this[this.tableStudent.core4Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issub5Null() {
                return this.IsNull(this.tableStudent.sub5Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsub5Null() {
                this[this.tableStudent.sub5Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isopt1Null() {
                return this.IsNull(this.tableStudent.opt1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setopt1Null() {
                this[this.tableStudent.opt1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issub6Null() {
                return this.IsNull(this.tableStudent.sub6Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsub6Null() {
                this[this.tableStudent.sub6Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isopt2Null() {
                return this.IsNull(this.tableStudent.opt2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setopt2Null() {
                this[this.tableStudent.opt2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issub7Null() {
                return this.IsNull(this.tableStudent.sub7Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsub7Null() {
                this[this.tableStudent.sub7Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isopt3Null() {
                return this.IsNull(this.tableStudent.opt3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setopt3Null() {
                this[this.tableStudent.opt3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issub8Null() {
                return this.IsNull(this.tableStudent.sub8Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsub8Null() {
                this[this.tableStudent.sub8Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isopt4Null() {
                return this.IsNull(this.tableStudent.opt4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setopt4Null() {
                this[this.tableStudent.opt4Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StudentRowChangeEvent : System.EventArgs {
            
            private StudentRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentRowChangeEvent(StudentRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace testdb.StudentDBDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class StudentTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StudentTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Student";
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("RollNumber", "RollNumber");
            tableMapping.ColumnMappings.Add("TotalCredit", "TotalCredit");
            tableMapping.ColumnMappings.Add("Email", "Email");
            tableMapping.ColumnMappings.Add("sem", "sem");
            tableMapping.ColumnMappings.Add("sub1", "sub1");
            tableMapping.ColumnMappings.Add("core1", "core1");
            tableMapping.ColumnMappings.Add("sub2", "sub2");
            tableMapping.ColumnMappings.Add("core2", "core2");
            tableMapping.ColumnMappings.Add("sub3", "sub3");
            tableMapping.ColumnMappings.Add("core3", "core3");
            tableMapping.ColumnMappings.Add("sub4", "sub4");
            tableMapping.ColumnMappings.Add("core4", "core4");
            tableMapping.ColumnMappings.Add("sub5", "sub5");
            tableMapping.ColumnMappings.Add("opt1", "opt1");
            tableMapping.ColumnMappings.Add("sub6", "sub6");
            tableMapping.ColumnMappings.Add("opt2", "opt2");
            tableMapping.ColumnMappings.Add("sub7", "sub7");
            tableMapping.ColumnMappings.Add("opt3", "opt3");
            tableMapping.ColumnMappings.Add("sub8", "sub8");
            tableMapping.ColumnMappings.Add("opt4", "opt4");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Student] ([FirstName], [LastName], [RollNumber], [TotalCredit], [Email], [sem], [sub1], [core1], [sub2], [core2], [sub3], [core3], [sub4], [core4], [sub5], [opt1], [sub6], [opt2], [sub7], [opt3], [sub8], [opt4]) VALUES (@FirstName, @LastName, @RollNumber, @TotalCredit, @Email, @sem, @sub1, @core1, @sub2, @core2, @sub3, @core3, @sub4, @core4, @sub5, @opt1, @sub6, @opt2, @sub7, @opt3, @sub8, @opt4)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FirstName", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FirstName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastName", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LastName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RollNumber", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RollNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TotalCredit", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TotalCredit", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Email", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Email", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sem", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sem", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sub1", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sub1", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@core1", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "core1", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sub2", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sub2", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@core2", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "core2", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sub3", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sub3", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@core3", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "core3", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sub4", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sub4", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@core4", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "core4", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sub5", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sub5", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@opt1", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "opt1", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sub6", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sub6", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@opt2", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "opt2", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sub7", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sub7", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@opt3", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "opt3", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sub8", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sub8", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@opt4", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "opt4", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::testdb.Properties.Settings.Default.StudentDBConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[9];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT FirstName, LastName, RollNumber, TotalCredit, Email, sem, sub1, core1, sub" +
                "2, core2, sub3, core3, sub4, core4, sub5, opt1, sub6, opt2, sub7, opt3, sub8, op" +
                "t4 FROM Student";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM Student WHERE (RollNumber = @rollnumbertextbox AND sem = @semTextBox)" +
                "";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@rollnumbertextbox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "RollNumber", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@semTextBox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "sem", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT FirstName, LastName, RollNumber, TotalCredit, Email, sem, sub1, core1, sub" +
                "2, core2, sub3, core3, sub4, core4, sub5, opt1, sub6, opt2, sub7, opt3, sub8, op" +
                "t4 FROM Student WHERE RollNumber = @rollnumber";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@rollnumber", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "RollNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "SELECT FirstName, LastName, sub1, core1, sub2, core2, sub3, core3, sub4, core4, s" +
                "ub5, opt1, sub6, opt2, sub7, opt3, sub8, opt4 FROM Student WHERE RollNumber = @r" +
                "ollnumberbox AND sem = @sembox";
            this._commandCollection[3].CommandType = System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@rollnumberbox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "RollNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@sembox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "sem", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "SELECT FirstName, LastName, sub1, core1, sub2, core2, sub3, core3, sub4, core4, s" +
                "ub5, opt1, sub6, opt2, sub7, opt3, sub8, opt4 FROM Student WHERE RollNumber = @r" +
                "ollnumberbox AND sem = @sembox";
            this._commandCollection[4].CommandType = System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@rollnumberbox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "RollNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@sembox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "sem", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "SELECT FirstName, LastName, sub1, sub2, sub3, sub4, sub5,sub6, sub7, sub8 FROM St" +
                "udent WHERE RollNumber = @rollbox AND sem = @sembox";
            this._commandCollection[5].CommandType = System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@rollbox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "RollNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@sembox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "sem", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "SELECT FirstName, LastName, RollNumber, TotalCredit, Email, sem, sub1, core1, sub" +
                "2, core2, sub3, core3, sub4, core4, sub5, opt1, sub6, opt2, sub7, opt3, sub8, op" +
                "t4 FROM Student WHERE RollNumber=@rollbox";
            this._commandCollection[6].CommandType = System.Data.CommandType.Text;
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@rollbox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "RollNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = "SELECT FirstName, LastName, RollNumber, TotalCredit, Email, sem, sub1, core1, sub" +
                "2, core2, sub3, core3, sub4, core4, sub5, opt1, sub6, opt2, sub7, opt3, sub8, op" +
                "t4 FROM Student WHERE RollNumber=@rollbox AND sem=@sembox";
            this._commandCollection[7].CommandType = System.Data.CommandType.Text;
            this._commandCollection[7].Parameters.Add(new System.Data.SqlClient.SqlParameter("@rollbox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "RollNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new System.Data.SqlClient.SqlParameter("@sembox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "sem", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[8].Connection = this.Connection;
            this._commandCollection[8].CommandText = @"INSERT INTO [dbo].[Student] ([FirstName], [LastName], [RollNumber], [TotalCredit], [Email], [sem], [sub1], [core1], [sub2], [core2], [sub3], [core3], [sub4], [core4], [sub5], [opt1], [sub6], [opt2], [sub7], [opt3], [sub8], [opt4]) VALUES (@firstnametextbox, @lastnametextbox, @rollnumbertextbox, @totalcredits, @emailtextbox, @semTextBox, @sub1, @core1, @sub2, @core2, @sub3, @core3, @sub4, @core4, @sub5, @opt1, @sub6, @opt2, @sub7, @opt3, @sub8, @opt4)";
            this._commandCollection[8].CommandType = System.Data.CommandType.Text;
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@firstnametextbox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "FirstName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@lastnametextbox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "LastName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@rollnumbertextbox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "RollNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalcredits", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "TotalCredit", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@emailtextbox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "Email", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@semTextBox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "sem", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@sub1", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "sub1", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@core1", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "core1", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@sub2", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "sub2", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@core2", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "core2", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@sub3", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "sub3", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@core3", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "core3", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@sub4", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "sub4", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@core4", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "core4", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@sub5", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "sub5", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@opt1", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "opt1", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@sub6", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "sub6", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@opt2", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "opt2", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@sub7", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "sub7", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@opt3", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "opt3", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@sub8", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "sub8", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@opt4", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "opt4", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudentDBDataSet.StudentDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudentDBDataSet.StudentDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudentDBDataSet.StudentDataTable dataTable = new StudentDBDataSet.StudentDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByBrowseCourseStud(StudentDBDataSet.StudentDataTable dataTable, string rollnumber) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((rollnumber == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(rollnumber));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual StudentDBDataSet.StudentDataTable GetDataByBrowseCourseStud(string rollnumber) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((rollnumber == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(rollnumber));
            }
            StudentDBDataSet.StudentDataTable dataTable = new StudentDBDataSet.StudentDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByBrowsemarks(StudentDBDataSet.StudentDataTable dataTable, string rollnumberbox, string sembox) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((rollnumberbox == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(rollnumberbox));
            }
            if ((sembox == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(sembox));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual StudentDBDataSet.StudentDataTable GetDataByBrowsemarks(string rollnumberbox, string sembox) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((rollnumberbox == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(rollnumberbox));
            }
            if ((sembox == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(sembox));
            }
            StudentDBDataSet.StudentDataTable dataTable = new StudentDBDataSet.StudentDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByBrowseMarkStud(StudentDBDataSet.StudentDataTable dataTable, string rollnumberbox, string sembox) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((rollnumberbox == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(rollnumberbox));
            }
            if ((sembox == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(sembox));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual StudentDBDataSet.StudentDataTable GetDataByBrowseMarkStud(string rollnumberbox, string sembox) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((rollnumberbox == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(rollnumberbox));
            }
            if ((sembox == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(sembox));
            }
            StudentDBDataSet.StudentDataTable dataTable = new StudentDBDataSet.StudentDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBySearchMS(StudentDBDataSet.StudentDataTable dataTable, string rollbox, string sembox) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((rollbox == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(rollbox));
            }
            if ((sembox == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(sembox));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual StudentDBDataSet.StudentDataTable GetDataBySearchMS(string rollbox, string sembox) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((rollbox == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(rollbox));
            }
            if ((sembox == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(sembox));
            }
            StudentDBDataSet.StudentDataTable dataTable = new StudentDBDataSet.StudentDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBySearchRoll(StudentDBDataSet.StudentDataTable dataTable, string rollbox) {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            if ((rollbox == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(rollbox));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual StudentDBDataSet.StudentDataTable GetDataBySearchRoll(string rollbox) {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            if ((rollbox == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(rollbox));
            }
            StudentDBDataSet.StudentDataTable dataTable = new StudentDBDataSet.StudentDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBySearchrollsem(StudentDBDataSet.StudentDataTable dataTable, string rollbox, string sembox) {
            this.Adapter.SelectCommand = this.CommandCollection[7];
            if ((rollbox == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(rollbox));
            }
            if ((sembox == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(sembox));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual StudentDBDataSet.StudentDataTable GetDataBySearchrollsem(string rollbox, string sembox) {
            this.Adapter.SelectCommand = this.CommandCollection[7];
            if ((rollbox == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(rollbox));
            }
            if ((sembox == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(sembox));
            }
            StudentDBDataSet.StudentDataTable dataTable = new StudentDBDataSet.StudentDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudentDBDataSet.StudentDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudentDBDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Student");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string FirstName, 
                    string LastName, 
                    string RollNumber, 
                    System.Nullable<int> TotalCredit, 
                    string Email, 
                    string sem, 
                    string sub1, 
                    string core1, 
                    string sub2, 
                    string core2, 
                    string sub3, 
                    string core3, 
                    string sub4, 
                    string core4, 
                    string sub5, 
                    string opt1, 
                    string sub6, 
                    string opt2, 
                    string sub7, 
                    string opt3, 
                    string sub8, 
                    string opt4) {
            if ((FirstName == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(FirstName));
            }
            if ((LastName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(LastName));
            }
            if ((RollNumber == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(RollNumber));
            }
            if ((TotalCredit.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(TotalCredit.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Email == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Email));
            }
            if ((sem == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(sem));
            }
            if ((sub1 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(sub1));
            }
            if ((core1 == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(core1));
            }
            if ((sub2 == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(sub2));
            }
            if ((core2 == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(core2));
            }
            if ((sub3 == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(sub3));
            }
            if ((core3 == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(core3));
            }
            if ((sub4 == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(sub4));
            }
            if ((core4 == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(core4));
            }
            if ((sub5 == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(sub5));
            }
            if ((opt1 == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(opt1));
            }
            if ((sub6 == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(sub6));
            }
            if ((opt2 == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(opt2));
            }
            if ((sub7 == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(sub7));
            }
            if ((opt3 == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(opt3));
            }
            if ((sub8 == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(sub8));
            }
            if ((opt4 == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(opt4));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteRow(string rollnumbertextbox, string semTextBox) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((rollnumbertextbox == null)) {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(rollnumbertextbox));
            }
            if ((semTextBox == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(semTextBox));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertData(
                    string firstnametextbox, 
                    string lastnametextbox, 
                    string rollnumbertextbox, 
                    System.Nullable<int> totalcredits, 
                    string emailtextbox, 
                    string semTextBox, 
                    string sub1, 
                    string core1, 
                    string sub2, 
                    string core2, 
                    string sub3, 
                    string core3, 
                    string sub4, 
                    string core4, 
                    string sub5, 
                    string opt1, 
                    string sub6, 
                    string opt2, 
                    string sub7, 
                    string opt3, 
                    string sub8, 
                    string opt4) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[8];
            if ((firstnametextbox == null)) {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(firstnametextbox));
            }
            if ((lastnametextbox == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(lastnametextbox));
            }
            if ((rollnumbertextbox == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(rollnumbertextbox));
            }
            if ((totalcredits.HasValue == true)) {
                command.Parameters[3].Value = ((int)(totalcredits.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            if ((emailtextbox == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(emailtextbox));
            }
            if ((semTextBox == null)) {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(semTextBox));
            }
            if ((sub1 == null)) {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(sub1));
            }
            if ((core1 == null)) {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(core1));
            }
            if ((sub2 == null)) {
                command.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(sub2));
            }
            if ((core2 == null)) {
                command.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(core2));
            }
            if ((sub3 == null)) {
                command.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[10].Value = ((string)(sub3));
            }
            if ((core3 == null)) {
                command.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[11].Value = ((string)(core3));
            }
            if ((sub4 == null)) {
                command.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[12].Value = ((string)(sub4));
            }
            if ((core4 == null)) {
                command.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[13].Value = ((string)(core4));
            }
            if ((sub5 == null)) {
                command.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[14].Value = ((string)(sub5));
            }
            if ((opt1 == null)) {
                command.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[15].Value = ((string)(opt1));
            }
            if ((sub6 == null)) {
                command.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[16].Value = ((string)(sub6));
            }
            if ((opt2 == null)) {
                command.Parameters[17].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[17].Value = ((string)(opt2));
            }
            if ((sub7 == null)) {
                command.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[18].Value = ((string)(sub7));
            }
            if ((opt3 == null)) {
                command.Parameters[19].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[19].Value = ((string)(opt3));
            }
            if ((sub8 == null)) {
                command.Parameters[20].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[20].Value = ((string)(sub8));
            }
            if ((opt4 == null)) {
                command.Parameters[21].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[21].Value = ((string)(opt4));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
}

#pragma warning restore 1591