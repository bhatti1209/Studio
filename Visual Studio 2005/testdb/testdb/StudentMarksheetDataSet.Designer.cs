//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace testdb {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("StudentMarksheetDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class StudentMarksheetDataSet : System.Data.DataSet {
        
        private MarksheetDataTable tableMarksheet;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StudentMarksheetDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected StudentMarksheetDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Marksheet"] != null)) {
                    base.Tables.Add(new MarksheetDataTable(ds.Tables["Marksheet"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MarksheetDataTable Marksheet {
            get {
                return this.tableMarksheet;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            StudentMarksheetDataSet cln = ((StudentMarksheetDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Marksheet"] != null)) {
                    base.Tables.Add(new MarksheetDataTable(ds.Tables["Marksheet"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMarksheet = ((MarksheetDataTable)(base.Tables["Marksheet"]));
            if ((initTable == true)) {
                if ((this.tableMarksheet != null)) {
                    this.tableMarksheet.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "StudentMarksheetDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/StudentMarksheetDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMarksheet = new MarksheetDataTable();
            base.Tables.Add(this.tableMarksheet);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMarksheet() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            StudentMarksheetDataSet ds = new StudentMarksheetDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void MarksheetRowChangeEventHandler(object sender, MarksheetRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MarksheetDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnRollNumber;
            
            private System.Data.DataColumn columnSem;
            
            private System.Data.DataColumn columngrade1;
            
            private System.Data.DataColumn columngrade2;
            
            private System.Data.DataColumn columngrade3;
            
            private System.Data.DataColumn columngrade4;
            
            private System.Data.DataColumn columngrade5;
            
            private System.Data.DataColumn columngrade6;
            
            private System.Data.DataColumn columngrade7;
            
            private System.Data.DataColumn columngrade8;
            
            private System.Data.DataColumn columnSGPA;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarksheetDataTable() {
                this.TableName = "Marksheet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MarksheetDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MarksheetDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RollNumberColumn {
                get {
                    return this.columnRollNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SemColumn {
                get {
                    return this.columnSem;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn grade1Column {
                get {
                    return this.columngrade1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn grade2Column {
                get {
                    return this.columngrade2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn grade3Column {
                get {
                    return this.columngrade3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn grade4Column {
                get {
                    return this.columngrade4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn grade5Column {
                get {
                    return this.columngrade5;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn grade6Column {
                get {
                    return this.columngrade6;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn grade7Column {
                get {
                    return this.columngrade7;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn grade8Column {
                get {
                    return this.columngrade8;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SGPAColumn {
                get {
                    return this.columnSGPA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarksheetRow this[int index] {
                get {
                    return ((MarksheetRow)(this.Rows[index]));
                }
            }
            
            public event MarksheetRowChangeEventHandler MarksheetRowChanging;
            
            public event MarksheetRowChangeEventHandler MarksheetRowChanged;
            
            public event MarksheetRowChangeEventHandler MarksheetRowDeleting;
            
            public event MarksheetRowChangeEventHandler MarksheetRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMarksheetRow(MarksheetRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarksheetRow AddMarksheetRow(string RollNumber, string Sem, string grade1, string grade2, string grade3, string grade4, string grade5, string grade6, string grade7, string grade8, string SGPA) {
                MarksheetRow rowMarksheetRow = ((MarksheetRow)(this.NewRow()));
                rowMarksheetRow.ItemArray = new object[] {
                        RollNumber,
                        Sem,
                        grade1,
                        grade2,
                        grade3,
                        grade4,
                        grade5,
                        grade6,
                        grade7,
                        grade8,
                        SGPA};
                this.Rows.Add(rowMarksheetRow);
                return rowMarksheetRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MarksheetDataTable cln = ((MarksheetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MarksheetDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRollNumber = base.Columns["RollNumber"];
                this.columnSem = base.Columns["Sem"];
                this.columngrade1 = base.Columns["grade1"];
                this.columngrade2 = base.Columns["grade2"];
                this.columngrade3 = base.Columns["grade3"];
                this.columngrade4 = base.Columns["grade4"];
                this.columngrade5 = base.Columns["grade5"];
                this.columngrade6 = base.Columns["grade6"];
                this.columngrade7 = base.Columns["grade7"];
                this.columngrade8 = base.Columns["grade8"];
                this.columnSGPA = base.Columns["SGPA"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRollNumber = new System.Data.DataColumn("RollNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollNumber);
                this.columnSem = new System.Data.DataColumn("Sem", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSem);
                this.columngrade1 = new System.Data.DataColumn("grade1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngrade1);
                this.columngrade2 = new System.Data.DataColumn("grade2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngrade2);
                this.columngrade3 = new System.Data.DataColumn("grade3", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngrade3);
                this.columngrade4 = new System.Data.DataColumn("grade4", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngrade4);
                this.columngrade5 = new System.Data.DataColumn("grade5", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngrade5);
                this.columngrade6 = new System.Data.DataColumn("grade6", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngrade6);
                this.columngrade7 = new System.Data.DataColumn("grade7", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngrade7);
                this.columngrade8 = new System.Data.DataColumn("grade8", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngrade8);
                this.columnSGPA = new System.Data.DataColumn("SGPA", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSGPA);
                this.columnRollNumber.MaxLength = 10;
                this.columnSem.MaxLength = 10;
                this.columngrade1.MaxLength = 10;
                this.columngrade2.MaxLength = 10;
                this.columngrade3.MaxLength = 10;
                this.columngrade4.MaxLength = 10;
                this.columngrade5.MaxLength = 10;
                this.columngrade6.MaxLength = 10;
                this.columngrade7.MaxLength = 10;
                this.columngrade8.MaxLength = 10;
                this.columnSGPA.MaxLength = 10;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarksheetRow NewMarksheetRow() {
                return ((MarksheetRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MarksheetRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MarksheetRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MarksheetRowChanged != null)) {
                    this.MarksheetRowChanged(this, new MarksheetRowChangeEvent(((MarksheetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MarksheetRowChanging != null)) {
                    this.MarksheetRowChanging(this, new MarksheetRowChangeEvent(((MarksheetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MarksheetRowDeleted != null)) {
                    this.MarksheetRowDeleted(this, new MarksheetRowChangeEvent(((MarksheetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MarksheetRowDeleting != null)) {
                    this.MarksheetRowDeleting(this, new MarksheetRowChangeEvent(((MarksheetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMarksheetRow(MarksheetRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                StudentMarksheetDataSet ds = new StudentMarksheetDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MarksheetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MarksheetRow : System.Data.DataRow {
            
            private MarksheetDataTable tableMarksheet;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MarksheetRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMarksheet = ((MarksheetDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RollNumber {
                get {
                    try {
                        return ((string)(this[this.tableMarksheet.RollNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RollNumber\' in table \'Marksheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarksheet.RollNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sem {
                get {
                    try {
                        return ((string)(this[this.tableMarksheet.SemColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Sem\' in table \'Marksheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarksheet.SemColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string grade1 {
                get {
                    try {
                        return ((string)(this[this.tableMarksheet.grade1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'grade1\' in table \'Marksheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarksheet.grade1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string grade2 {
                get {
                    try {
                        return ((string)(this[this.tableMarksheet.grade2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'grade2\' in table \'Marksheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarksheet.grade2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string grade3 {
                get {
                    try {
                        return ((string)(this[this.tableMarksheet.grade3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'grade3\' in table \'Marksheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarksheet.grade3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string grade4 {
                get {
                    try {
                        return ((string)(this[this.tableMarksheet.grade4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'grade4\' in table \'Marksheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarksheet.grade4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string grade5 {
                get {
                    try {
                        return ((string)(this[this.tableMarksheet.grade5Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'grade5\' in table \'Marksheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarksheet.grade5Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string grade6 {
                get {
                    try {
                        return ((string)(this[this.tableMarksheet.grade6Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'grade6\' in table \'Marksheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarksheet.grade6Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string grade7 {
                get {
                    try {
                        return ((string)(this[this.tableMarksheet.grade7Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'grade7\' in table \'Marksheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarksheet.grade7Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string grade8 {
                get {
                    try {
                        return ((string)(this[this.tableMarksheet.grade8Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'grade8\' in table \'Marksheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarksheet.grade8Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SGPA {
                get {
                    try {
                        return ((string)(this[this.tableMarksheet.SGPAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SGPA\' in table \'Marksheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarksheet.SGPAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollNumberNull() {
                return this.IsNull(this.tableMarksheet.RollNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollNumberNull() {
                this[this.tableMarksheet.RollNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSemNull() {
                return this.IsNull(this.tableMarksheet.SemColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSemNull() {
                this[this.tableMarksheet.SemColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isgrade1Null() {
                return this.IsNull(this.tableMarksheet.grade1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setgrade1Null() {
                this[this.tableMarksheet.grade1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isgrade2Null() {
                return this.IsNull(this.tableMarksheet.grade2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setgrade2Null() {
                this[this.tableMarksheet.grade2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isgrade3Null() {
                return this.IsNull(this.tableMarksheet.grade3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setgrade3Null() {
                this[this.tableMarksheet.grade3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isgrade4Null() {
                return this.IsNull(this.tableMarksheet.grade4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setgrade4Null() {
                this[this.tableMarksheet.grade4Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isgrade5Null() {
                return this.IsNull(this.tableMarksheet.grade5Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setgrade5Null() {
                this[this.tableMarksheet.grade5Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isgrade6Null() {
                return this.IsNull(this.tableMarksheet.grade6Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setgrade6Null() {
                this[this.tableMarksheet.grade6Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isgrade7Null() {
                return this.IsNull(this.tableMarksheet.grade7Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setgrade7Null() {
                this[this.tableMarksheet.grade7Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isgrade8Null() {
                return this.IsNull(this.tableMarksheet.grade8Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setgrade8Null() {
                this[this.tableMarksheet.grade8Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSGPANull() {
                return this.IsNull(this.tableMarksheet.SGPAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSGPANull() {
                this[this.tableMarksheet.SGPAColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MarksheetRowChangeEvent : System.EventArgs {
            
            private MarksheetRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarksheetRowChangeEvent(MarksheetRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarksheetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace testdb.StudentMarksheetDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MarksheetTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MarksheetTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Marksheet";
            tableMapping.ColumnMappings.Add("RollNumber", "RollNumber");
            tableMapping.ColumnMappings.Add("Sem", "Sem");
            tableMapping.ColumnMappings.Add("grade1", "grade1");
            tableMapping.ColumnMappings.Add("grade2", "grade2");
            tableMapping.ColumnMappings.Add("grade3", "grade3");
            tableMapping.ColumnMappings.Add("grade4", "grade4");
            tableMapping.ColumnMappings.Add("grade5", "grade5");
            tableMapping.ColumnMappings.Add("grade6", "grade6");
            tableMapping.ColumnMappings.Add("grade7", "grade7");
            tableMapping.ColumnMappings.Add("grade8", "grade8");
            tableMapping.ColumnMappings.Add("SGPA", "SGPA");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Marksheet] ([RollNumber], [Sem], [grade1], [grade2], [grade3]," +
                " [grade4], [grade5], [grade6], [grade7], [grade8], [SGPA]) VALUES (@RollNumber, " +
                "@Sem, @grade1, @grade2, @grade3, @grade4, @grade5, @grade6, @grade7, @grade8, @S" +
                "GPA)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RollNumber", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RollNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Sem", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Sem", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@grade1", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "grade1", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@grade2", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "grade2", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@grade3", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "grade3", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@grade4", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "grade4", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@grade5", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "grade5", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@grade6", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "grade6", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@grade7", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "grade7", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@grade8", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "grade8", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SGPA", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SGPA", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::testdb.Properties.Settings.Default.StudentMarksheetConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[6];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT RollNumber, Sem, grade1, grade2, grade3, grade4, grade5, grade6, grade7, g" +
                "rade8, SGPA FROM dbo.Marksheet";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM Marksheet WHERE RollNumber = @rollnumberbox AND Sem = @sembox";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@rollnumberbox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "RollNumber", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@sembox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "Sem", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT RollNumber, Sem, grade1, grade2, grade3, grade4, grade5, grade6, grade7, g" +
                "rade8, SGPA FROM dbo.Marksheet WHERE RollNumber = @rollnumber";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@rollnumber", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "RollNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "SELECT RollNumber, Sem, grade1, grade2, grade3, grade4, grade5, grade6, grade7, g" +
                "rade8, SGPA FROM dbo.Marksheet WHERE RollNumber = @rollbox AND Sem = @sembox";
            this._commandCollection[3].CommandType = System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@rollbox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "RollNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@sembox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "Sem", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "SELECT RollNumber, Sem, grade1, grade2, grade3, grade4, grade5, grade6, grade7, g" +
                "rade8, SGPA FROM dbo.Marksheet WHERE RollNumber = @rollbox";
            this._commandCollection[4].CommandType = System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@rollbox", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "RollNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "INSERT INTO [dbo].[Marksheet] ([RollNumber], [Sem], [grade1], [grade2], [grade3]," +
                " [grade4], [grade5], [grade6], [grade7], [grade8], [SGPA]) VALUES (@RollNumber, " +
                "@Sem, @grade1, @grade2, @grade3, @grade4, @grade5, @grade6, @grade7, @grade8, @S" +
                "GPA)";
            this._commandCollection[5].CommandType = System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RollNumber", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "RollNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Sem", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "Sem", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@grade1", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "grade1", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@grade2", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "grade2", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@grade3", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "grade3", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@grade4", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "grade4", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@grade5", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "grade5", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@grade6", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "grade6", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@grade7", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "grade7", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@grade8", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "grade8", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SGPA", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "SGPA", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudentMarksheetDataSet.MarksheetDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudentMarksheetDataSet.MarksheetDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudentMarksheetDataSet.MarksheetDataTable dataTable = new StudentMarksheetDataSet.MarksheetDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByBrowseMarkStud(StudentMarksheetDataSet.MarksheetDataTable dataTable, string rollnumber) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((rollnumber == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(rollnumber));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual StudentMarksheetDataSet.MarksheetDataTable GetDataByBrowseMarkStud(string rollnumber) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((rollnumber == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(rollnumber));
            }
            StudentMarksheetDataSet.MarksheetDataTable dataTable = new StudentMarksheetDataSet.MarksheetDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBySeachMSRollSem(StudentMarksheetDataSet.MarksheetDataTable dataTable, string rollbox, string sembox) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((rollbox == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(rollbox));
            }
            if ((sembox == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(sembox));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual StudentMarksheetDataSet.MarksheetDataTable GetDataBySearchMSRollSem(string rollbox, string sembox) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((rollbox == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(rollbox));
            }
            if ((sembox == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(sembox));
            }
            StudentMarksheetDataSet.MarksheetDataTable dataTable = new StudentMarksheetDataSet.MarksheetDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBySearchMSRoll(StudentMarksheetDataSet.MarksheetDataTable dataTable, string rollbox) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((rollbox == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(rollbox));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual StudentMarksheetDataSet.MarksheetDataTable GetDataBySearchMSRoll(string rollbox) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((rollbox == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(rollbox));
            }
            StudentMarksheetDataSet.MarksheetDataTable dataTable = new StudentMarksheetDataSet.MarksheetDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudentMarksheetDataSet.MarksheetDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudentMarksheetDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Marksheet");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string RollNumber, string Sem, string grade1, string grade2, string grade3, string grade4, string grade5, string grade6, string grade7, string grade8, string SGPA) {
            if ((RollNumber == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(RollNumber));
            }
            if ((Sem == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Sem));
            }
            if ((grade1 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(grade1));
            }
            if ((grade2 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(grade2));
            }
            if ((grade3 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(grade3));
            }
            if ((grade4 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(grade4));
            }
            if ((grade5 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(grade5));
            }
            if ((grade6 == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(grade6));
            }
            if ((grade7 == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(grade7));
            }
            if ((grade8 == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(grade8));
            }
            if ((SGPA == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(SGPA));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteMarks(string rollnumberbox, string sembox) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((rollnumberbox == null)) {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(rollnumberbox));
            }
            if ((sembox == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(sembox));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertMarks(string RollNumber, string Sem, string grade1, string grade2, string grade3, string grade4, string grade5, string grade6, string grade7, string grade8, string SGPA) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[5];
            if ((RollNumber == null)) {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(RollNumber));
            }
            if ((Sem == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(Sem));
            }
            if ((grade1 == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(grade1));
            }
            if ((grade2 == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(grade2));
            }
            if ((grade3 == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(grade3));
            }
            if ((grade4 == null)) {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(grade4));
            }
            if ((grade5 == null)) {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(grade5));
            }
            if ((grade6 == null)) {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(grade6));
            }
            if ((grade7 == null)) {
                command.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(grade7));
            }
            if ((grade8 == null)) {
                command.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(grade8));
            }
            if ((SGPA == null)) {
                command.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[10].Value = ((string)(SGPA));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
}

#pragma warning restore 1591